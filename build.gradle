buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${craftcreator_version}"
group = 'fr.eno.craftcreator' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${craftcreator_name}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "1.16.5-2022.03.06-1.16.5"
    // mappings channel: 'snapshot', version: '20210309-1.16.5'
    // mappings channel: 'official', version: "1.16.5"

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                craftcreator {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                craftcreator {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'craftcreator', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                craftcreator {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Curseforge Maven
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    // KubeJS
    implementation fg.deobf("curse.maven:kubejs-${kubejs_project_id}:${kubejs_cursefileid}") // KubeJS
    // Rhino (KubeJS Dependency)
    implementation fg.deobf("curse.maven:rhino-${rhino_project_id}:${rhino_cursefileid}")
    // Architectury (KubeJS Dependency)
    implementation fg.deobf("curse.maven:architectury-${architectury_project_id}:${architectury_cursefileid}")

    // Botania
    implementation fg.deobf("curse.maven:botania-${botania_project_id}:${botania_cursefileid}") // Botania
    // Curios (Botania Dependency)
    implementation fg.deobf("curse.maven:curios-${curios_project_id}:${curios_cursefileid}")
    // Patchouli (Botania Dependency)
    implementation fg.deobf("curse.maven:patchouli-${patchouli_project_id}:${patchouli_cursefileid}")

    // Thermal Series
    implementation fg.deobf("curse.maven:thermal-foundation-${thermal_foundation_project_id}:${thermal_foundation_cursefileid}")
    implementation fg.deobf("curse.maven:thermal-expansion-${thermal_expansion_project_id}:${thermal_expansion_cursefileid}")
    implementation fg.deobf("curse.maven:cofh-core-${cofh_core_project_id}:${cofh_core_cursefileid}")
    // Thermal Series Dependency
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "En0ri4n",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "En0ri4n",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
